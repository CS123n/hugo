<rss version="2.0">
<channel>

<item>
  <title>Docker配置</title>
  <link>https://www.liulp.club/2021/08/docker/</link>
    <description>&lt;p&gt;Openwrt中有使用docker的需求，顺道学习一下docker的配置。&lt;/p&gt;
&lt;h2 id=&#34;空间挂载&#34;&gt;空间挂载&lt;/h2&gt;
&lt;p&gt;openwrt默认是/opt和/overlay共用空间，因为文件格式等问题，docker在这种情况下只能使用vfs储存模式，占用空间大且速度慢。为此，在openwrt中分别为overlay和docker的opt分别分配空间并格式化为ext4格式，然后把/overlay和/opt分别挂载在上面，这样docker就会自动使用更好更快的overlay2储存模式。&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://cdn.jsdelivr.net/gh/CS123n/source@master/image/20200808091550.gif&#34;
    data-original=https://cdn.jsdelivr.net/gh/CS123n/source@master/image/202108032101457.webp class=&#34;lazyload&#34; alt=&#34;未命名 刘路平的主页&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;另外，我还将一块移动硬盘挂载在/mnt/share，而且将它通过&lt;code&gt;Samba&lt;/code&gt;进行网络共享，共享下局域网传文件速度还是很可观的。&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://cdn.jsdelivr.net/gh/CS123n/source@master/image/20200808091550.gif&#34;
    data-original=https://cdn.jsdelivr.net/gh/CS123n/source@master/image/202108032044324.webp class=&#34;lazyload&#34; alt=&#34;未命名 刘路平的主页&#34;/&gt;
&lt;/p&gt;
&lt;h2 id=&#34;homeassistant&#34;&gt;Homeassistant&lt;/h2&gt;
&lt;p&gt;首先是使用docker在openwrt中安装&lt;code&gt;Homeassistant&lt;/code&gt;，这样就可以本地搭建智能家居服务器。&lt;code&gt;Homeassistant&lt;/code&gt;使用&lt;code&gt;MQTT&lt;/code&gt;协议的通信服务，所以还搭建了一个基于&lt;code&gt;MQTT&lt;/code&gt;的开源服务器&lt;code&gt;Eclipse Mosquitto&lt;/code&gt;的docker。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/&#34;&gt;Homeassistant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/MQTT&#34;&gt;MQTT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mosquitto.org/&#34;&gt;Eclipse Mosquitto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mqtt&#34;&gt;MQTT&lt;/h3&gt;
&lt;p&gt;首先设置配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p /mosquitto/config
mkdir -p /mosquitto/data
mkdir -p /mosquitto/log
nano /mosquitto/config/mosquitto.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并在mosquitto.conf中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;persistence true
persistence_location /mosquitto/data
log_dest file /mosquitto/log/mosquitto.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果需要使用密码，因为我只在局域网提供服务，就没有添加用户名密码。在mosquitto.conf中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allow_anonymous false
password_file /mosquitto/pwfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在容器启动后运行命令，添加用户admin以及密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mosquitto_passwd -c /mosquitto/pwfile admin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并授予目录权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;chmod -R &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; /mosquitto
chmode -R &lt;span style=&#34;color:#ae81ff&#34;&gt;777&lt;/span&gt; /mosquitto/log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成以上准备后，启动容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mosquitto&amp;#34;&lt;/span&gt; --net&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;host &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    -v /mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    -v /mosquitto/data:/mosquitto/data &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    -v /mosquitto/log:/mosquitto/log &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    eclipse-mosquitto:1.6.14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要注意的是，一是最新版本的Eclipse Mosquitto 2无法被正常访问，所以建议使用1.6.14版本。二是在openwrt中的桥接模式，端口映射后被其他终端直接访问有问题，建议直接使用host模式，共享网络。&lt;/p&gt;
&lt;h3 id=&#34;homeassistant-1&#34;&gt;Homeassistant&lt;/h3&gt;
&lt;p&gt;接下来运行Homeassistant&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home-assistants&amp;#34;&lt;/span&gt; -p 8123:8123 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    -v /root/homeassistant/config:/config &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    -v /mnt/share:/mnt/share &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    homeassistant/home-assistant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了将配置文件进行映射，我还将我的分享目录进行了映射，这样就可以通过&lt;code&gt;Homeassistant&lt;/code&gt;直接访问分享目录下的影视资源。&lt;/p&gt;
&lt;h2 id=&#34;nginxphp&#34;&gt;Nginx+PHP&lt;/h2&gt;
&lt;p&gt;为了为局域网添加Speedtest。刚开始打算直接添加Speedtest的docker，可惜出现了架构不兼容的问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WARNING: The requested image&#39;s platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为此，我决定曲线救国，使用docker搭建web服务器。开始打算使用集成好的docker镜像，最后还是决定使用docker-compose的方案。分别安装nginx和php的官方docker镜像，这两个镜像都没有架构兼容性问题。&lt;/p&gt;
&lt;p&gt;首先安装php&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web-php&amp;#34;&lt;/span&gt; -p 9000:9000 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    -v /root/nginx/webroot:/usr/share/nginx/html &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    php:7.2-fpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其次添加nginx的配置文件conf.d&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name localhost;

    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/html;

    set $virtualdir &amp;quot;&amp;quot;;
    set $realdir &amp;quot;&amp;quot;;

    if ($request_uri ~ ^/([^/]*)/.*$ ) {
        set $virtualdir /$1;
    }

    if (-d &amp;quot;$document_root$virtualdir&amp;quot;) {
        set $realdir &amp;quot;${virtualdir}&amp;quot;;
    }

    location / {
        try_files $uri $uri/ $realdir/index.php?$args;
    }
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass 192.168.2.110:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，文件路径为/root/nginx/webroot。并且将&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fastcgi_pass 192.168.2.110:9000;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中的地址修改为php的运行位置。建议不要用桥接的地址，因为我发现每次重启后，桥接地址是可能发生变换的，建议端口映射后，直接使用局域网地址。&lt;/p&gt;
&lt;p&gt;然后运行nginx&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web-nginx&amp;#34;&lt;/span&gt; -p 8088:80 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;
    -v /root/nginx/conf.d:/etc/nginx/conf.d
    -v /root/nginx/webroot:/usr/share/nginx/html
    nginx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有个问题是，8080端口不能正常使用，建议使用自定义端口，譬如我用的8088端口。&lt;/p&gt;
&lt;h3 id=&#34;speedtest&#34;&gt;Speedtest&lt;/h3&gt;
&lt;p&gt;成功运行后，在文件目录，我的是/root/nginx/webroot，添加Speedtest的网站文件。并将example-singleServer-full.html重命名为默认文件index.html。然后就可以直接访问对应的网址测速了，我的是&lt;a href=&#34;http://192.168.2.110:8088/speedtest/&#34;&gt;192.168.2.110:8088/speedtest/&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/librespeed/speedtest&#34;&gt;Speedtest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当当当当，最终的测速效果如下&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;https://cdn.jsdelivr.net/gh/CS123n/source@master/image/20200808091550.gif&#34;
    data-original=https://cdn.jsdelivr.net/gh/CS123n/source@master/image/202108032017072.webp class=&#34;lazyload&#34; alt=&#34;未命名 刘路平的主页&#34;/&gt;
&lt;/p&gt;</description>
  <pubDate>Tue, 03 Aug 2021 17:46:55 +0800</pubDate>
  
  <guid>https://www.liulp.club/2021/08/docker/</guid>
</item>

</channel>
</rss>